{"version":3,"file":"static/js/authorization.81db3c0b.chunk.js","mappings":"mMACA,EAA0B,yB,UCIX,SAASA,EAAT,GAAiD,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACjD,OACE,oBAASC,UAAWC,EAApB,UACE,UAACC,EAAA,EAAD,YACE,eAAIF,UAAWF,EAAW,uBAAyB,eAAnD,SACGD,IAEFE,S,4ECVM,SAASI,EAAcC,GACpC,OAA0BC,EAAAA,EAAAA,UAASD,GAAnC,eAAOE,EAAP,KAAcC,EAAd,KAMA,MAAO,CAAED,MAAAA,EAAOC,SAAAA,EAAUC,aAJL,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MAChCF,EAASE,O,yKCLb,EAAuB,wBAAvB,EAAuD,yBAAvD,EAA8F,+B,wCCc/E,SAASE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAGIV,EAAAA,EAAAA,GAAc,IAFTW,EADT,EACER,MACcS,EAFhB,EAEEP,aAEF,GAGIL,EAAAA,EAAAA,GAAc,IAFTa,EADT,EACEV,MACcW,EAFhB,EAEET,aAEIU,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAG1B,GAAwCf,EAAAA,EAAAA,WAAS,GAAjD,eAAOgB,EAAP,KAAqBC,EAArB,MAGAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,SAACC,GACF,WAAdA,EAAMC,KACRJ,GAAgB,IAMpB,OAFAK,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,IAEH,IAMMM,EAAmB,WACnBT,IAEFT,GAASmB,EAAAA,EAAAA,MACTT,GAAgB,KAIpB,OACE,UAAC1B,EAAA,EAAD,CAASC,MAAM,oCAAoCC,UAAU,EAA7D,WACE,kBAAME,UAAWC,EAAQ+B,SAhBH,SAAAC,GACxBA,EAAIC,iBAEJtB,GAASuB,EAAAA,EAAAA,IAAM,CAAEC,MAAOtB,EAAWuB,SAAUrB,MAa3C,WACE,SAACsB,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,SACNC,QAAQ,WACRC,KAAK,QACLC,WAAW,EACX3C,UAAWC,EACXQ,MAAOK,EACP8B,SAAU7B,KAEZ,SAACuB,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,YACNC,QAAQ,WACRC,KAAK,WACLG,UAAQ,EACR7C,UAAWC,EACXQ,MAAOO,EACP4B,SAAU3B,KAEZ,SAAC6B,EAAA,EAAD,CACEL,QAAQ,YACRC,KAAK,SACLK,UAAWjC,GAAaE,EAAagC,OAAS,EAC9ChD,UAAWC,EACXgD,SAAS,SAACC,EAAA,EAAD,IALX,uBAUDhC,IACC,UAACiC,EAAA,EAAD,CACEC,GAAI,CACFC,MAAO,QACPC,OAAQ,YACRC,UAAW,EACXC,gBAAiB,QAEnBC,QAAS,EACTC,QAAS,kBAAMpC,GAAgB,IARjC,WAUE,SAACqC,EAAA,EAAD,CACEC,SAAS,QACTnB,QAAQ,WACRoB,QAAS,kBAAMvC,GAAgB,IAC/BwC,QACE,SAAChB,EAAA,EAAD,CACEiB,MAAM,UACNC,KAAK,QACLN,QAAS5B,EAHX,2BALJ,SAcGZ,IAEFG,IACC,SAACyB,EAAA,EAAD,CACEiB,MAAM,UACNC,KAAK,QACLN,QAAS5B,EAHX","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","hooks/useFormFields.js","webpack://goit-react-hw-08-phonebook/./src/views/LogInView/LogInView.module.css?d6ee","views/LogInView/LogInView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '../Container';\nimport s from './Section.module.css';\n\nexport default function Section({ title, isHidden, children }) {\n  return (\n    <section className={s.section}>\n      <Container>\n        <h1 className={isHidden ? 'sectionTitleIsHidden' : 'sectionTitle'}>\n          {title}\n        </h1>\n        {children}\n      </Container>\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n};\n","import { useState } from 'react';\n\nexport default function useFormFields(initialVal) {\n  const [state, setState] = useState(initialVal);\n\n  const handleChange = ({ target: { value } }) => {\n    setState(value);\n  };\n\n  return { state, setState, handleChange };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LogInView_form__1V3ky\",\"input\":\"LogInView_input__3+3pd\",\"registerBtn\":\"LogInView_registerBtn__r16iL\",\"input-field\":\"LogInView_input-field__6Ljc2\",\"icon\":\"LogInView_icon__m4bx1\",\"show-password\":\"LogInView_show-password__aVaZb\"};","import { useEffect, useState } from 'react'; // Import useEffect and useState\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\nimport Section from 'components/Section';\nimport useFormFields from 'hooks/useFormFields';\nimport { logIn } from 'redux/auth/authOperations';\nimport { getError } from 'redux/auth/authSelectors';\nimport s from './LogInView.module.css';\n\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport { resetError } from 'redux/auth/authActions';\n\nexport default function LogInView() {\n  const dispatch = useDispatch();\n  const {\n    state: userEmail,\n    handleChange: handleUserEmailChange,\n  } = useFormFields('');\n  const {\n    state: userPassword,\n    handleChange: handleUserPasswordChange,\n  } = useFormFields('');\n  const error = useSelector(getError);\n\n  // State to track if the user wants to close the modal\n  const [confirmClose, setConfirmClose] = useState(false);\n\n  // Listen for the escape key press\n  useEffect(() => {\n    const handleEscape = (event) => {\n      if (event.key === 'Escape') {\n        setConfirmClose(true);\n      }\n    };\n    \n    window.addEventListener('keydown', handleEscape);\n    \n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  }, []);\n\n  const handleLogInSubmit = evt => {\n    evt.preventDefault();\n\n    dispatch(logIn({ email: userEmail, password: userPassword }));\n  };\n\n  const handleCloseModal = () => {\n    if (confirmClose) {\n    \n      dispatch(resetError()); \n      setConfirmClose(false); \n    }\n  };\n\n  return (\n    <Section title=\"Please sign in to access the site\" isHidden={false}>\n      <form className={s.form} onSubmit={handleLogInSubmit}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Email:\"\n          variant=\"outlined\"\n          type=\"email\"\n          autoFocus={true}\n          className={s.input}\n          value={userEmail}\n          onChange={handleUserEmailChange}\n        />\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Password:\"\n          variant=\"outlined\"\n          type=\"password\"\n          required\n          className={s.input}\n          value={userPassword}\n          onChange={handleUserPasswordChange}\n        />\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          disabled={!userEmail || userPassword.length < 7}\n          className={s.registerBtn}\n          endIcon={<SendIcon />}\n        >\n          Log In\n        </Button>\n      </form>\n      {error && (\n        <Stack\n          sx={{\n            width: '400px',\n            margin: '10px auto',\n            boxShadow: 8,\n            backgroundColor: '#fff',\n          }}\n          spacing={2}\n          onClick={() => setConfirmClose(true)} // Open confirmation on overlay click\n        >\n          <Alert\n            severity=\"error\"\n            variant=\"outlined\"\n            onClose={() => setConfirmClose(true)} // Open confirmation when closing alert\n            action={\n              <Button\n                color=\"inherit\"\n                size=\"small\"\n                onClick={handleCloseModal}\n              >\n                Confirm Close\n              </Button>\n            }\n          >\n            {error}\n          </Alert>\n          {confirmClose && (\n            <Button\n              color=\"inherit\"\n              size=\"small\"\n              onClick={handleCloseModal}\n            >\n              Confirm Close\n            </Button>\n          )}\n        </Stack>\n      )}\n    </Section>\n  );\n}\n"],"names":["Section","title","isHidden","children","className","s","Container","useFormFields","initialVal","useState","state","setState","handleChange","value","target","LogInView","dispatch","useDispatch","userEmail","handleUserEmailChange","userPassword","handleUserPasswordChange","error","useSelector","getError","confirmClose","setConfirmClose","useEffect","handleEscape","event","key","window","addEventListener","removeEventListener","handleCloseModal","resetError","onSubmit","evt","preventDefault","logIn","email","password","TextField","id","label","variant","type","autoFocus","onChange","required","Button","disabled","length","endIcon","Send","Stack","sx","width","margin","boxShadow","backgroundColor","spacing","onClick","Alert","severity","onClose","action","color","size"],"sourceRoot":""}